
package xyz.danicostas.filmapp.view.activity;

import android.app.Activity;
import android.content.Context;
import android.content.Intent;
import android.content.SharedPreferences;
import android.os.Bundle;
import android.util.Log;
import android.widget.Button;
import android.widget.EditText;
import android.widget.ImageButton;
import android.widget.ImageView;
import android.widget.TextView;
import android.widget.Toast;

import androidx.appcompat.app.AppCompatActivity;
import androidx.recyclerview.widget.LinearLayoutManager;
import androidx.recyclerview.widget.RecyclerView;

import com.bumptech.glide.Glide;
import com.google.gson.Gson;
import com.google.gson.reflect.TypeToken;

import java.io.IOException;
import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.List;

import okhttp3.Call;
import okhttp3.Callback;
import okhttp3.MediaType;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.RequestBody;
import okhttp3.Response;
import xyz.danicostas.filmapp.R;
import xyz.danicostas.filmapp.model.Message;
import xyz.danicostas.filmapp.view.adapter.FriendListAdapter;
import xyz.danicostas.filmapp.view.adapter.MessageAdapter;
import xyz.danicostas.filmapp.view.fragment.FriendsFragment;

public class FriendActivity extends AppCompatActivity {

    private RecyclerView recyclerView;
    private MessageAdapter messageAdapter;
    private EditText messageInput;
    private Button sendButton;
    private String friendName;
    private String friendProfileUrl;
    private static final String TAG = "FriendActivity";
    private List<Message> messageList = new ArrayList<>();
    private boolean isChatbot = false;
    private OkHttpClient client;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_friend);
        
        //  HTTP client
        client = new OkHttpClient();
  
        TextView tvFriendName = findViewById(R.id.tvFriendNameDetail);
        friendName = getIntent().getStringExtra(FriendListAdapter.FRIEND_NAME);
        friendProfileUrl = getIntent().getStringExtra(FriendListAdapter.FRIEND_PROFILE_URL);
        tvFriendName.setText(friendName);
        
  
        isChatbot = "FilmBot ðŸ¤–".equals(friendName);
        
        TextView tvFriendStatus = findViewById(R.id.tvFriendStatus);
        if (isChatbot) {
            tvFriendStatus.setText("AI Assistant - Always online");
        }
        

        ImageView ivFriendProfile = findViewById(R.id.ivFriendProfile);
        
        try {
            if (friendProfileUrl != null && !friendProfileUrl.isEmpty()) {
                if (friendProfileUrl.matches("\\d+")) {
                    int resourceId = Integer.parseInt(friendProfileUrl);
                    ivFriendProfile.setImageResource(resourceId);
                } else {
                    Glide.with(this)
                        .load(friendProfileUrl)
                        .placeholder(R.drawable.default_avatar_vector)
                        .error(R.drawable.default_avatar_vector)
                        .centerCrop()
                        .into(ivFriendProfile);
                }
            }
        } catch (Exception e) {
            Log.e(TAG,e.getMessage());
            ivFriendProfile.setImageResource(R.drawable.default_avatar_vector);
        }
        
        ImageButton buttonBack = findViewById(R.id.buttonBack);
        buttonBack.setOnClickListener(v -> {
            saveMessages(); 

            finish();
        });

        loadMessages();
        

        recyclerView = findViewById(R.id.recyclerViewMessages);
        LinearLayoutManager layoutManager = new LinearLayoutManager(this);
        layoutManager.setStackFromEnd(true); // scroll hacia abajo
        recyclerView.setLayoutManager(layoutManager);
        messageAdapter = new MessageAdapter();
        recyclerView.setAdapter(messageAdapter);
        

        for (Message message : messageList) {
            messageAdapter.addMessage(message);
        }
        
        // Add welcome message for chatbot if no messages exist
        if (isChatbot && messageList.isEmpty()) {
            Message welcomeMessage = new Message("ðŸŽ¬ Hola Soy FilmBot, tu asistente de pelÃ­culas. Â¿Quieres recomendaciones o hablar sobre cine?", Message.TYPE_RECEIVED);
            messageAdapter.addMessage(welcomeMessage);
            messageList.add(welcomeMessage);
            saveMessages();
        }

        messageInput = findViewById(R.id.etMessageInput);
        sendButton = findViewById(R.id.btnSendMessage);
        
        sendButton.setOnClickListener(v -> sendMessage());
    }
    
    @Override
    protected void onPause() {
        super.onPause();
        saveMessages(); 
    }
    
    private void sendMessage() {
        String messageText = messageInput.getText().toString().trim();
        if (!messageText.isEmpty()) {
            // aÃ±adir mensajes
            Message sentMessage = new Message(messageText, Message.TYPE_SENT);
            messageAdapter.addMessage(sentMessage);
            messageList.add(sentMessage);
            
            messageInput.setText("");
            
            scrollToBottom();
            saveMessages();
            
            // Si el chat es chatbot, obtener respuesta de IA
            if (isChatbot) {
                getChatbotResponse(messageText);
            }
        }
    }
    
    private void getChatbotResponse(String userMessage) {

        runOnUiThread(() -> {
            Message typingMessage = new Message("ðŸ¤– Escribiendo...", Message.TYPE_RECEIVED);
            messageAdapter.addMessage(typingMessage);
            scrollToBottom();
            
            // Simulate AI 
            new android.os.Handler().postDelayed(() -> {
                
                if (messageAdapter.getItemCount() > 0) {
                    messageAdapter.removeLastMessage();
                }
                
               
                String botResponse = generateIntelligentCinemaResponse(userMessage.toLowerCase());
                
                
                Message botMessage = new Message("ðŸ¤– " + botResponse, Message.TYPE_RECEIVED);
                messageAdapter.addMessage(botMessage);
                messageList.add(botMessage); 
                scrollToBottom();
                saveMessages();
            }, 1800); 
        });
    }
    
    private String generateIntelligentCinemaResponse(String userMessage) {
        
        
     
        if (userMessage.matches(".*\\b(hola|hey|saludos|buenas|que tal|como estas)\\b.*")) {
            String[] greetings = {
                "Â¡Hola! Soy FilmBot, tu experto en cine. Â¿QuÃ© pelÃ­cula te apetece descubrir hoy?",
                "Â¡Hey, cinÃ©filo! Â¿Listo para explorar el mundo del cine?",
                "Â¡Saludos! Estoy aquÃ­ para hablar de pelÃ­culas. Â¿AlgÃºn gÃ©nero en mente?",
                "Â¡Buenas! Como tu asistente cinematogrÃ¡fico, Â¿en quÃ© puedo ayudarte?",
                "Â¡Hola! Â¿Buscas recomendaciones o quieres charlar sobre cine?"
            };
            return greetings[(int) (Math.random() * greetings.length)];
        }
        
    
        if (userMessage.matches(".*\\b(recomend|suger|aconsej|que.*ver|que.*miro)\\b.*")) {
            if (userMessage.contains("terror") || userMessage.contains("miedo")) {
                String[] horror = {
                    "Para terror te recomiendo: 'Hereditary' - terror psicolÃ³gico brutal",
                    "Si buscas sustos: 'El Conjuro' o 'Insidious' son perfectas",
                    "Terror moderno: 'Midsommar' te dejarÃ¡ perturbado por dÃ­as",
                    "'The Babadook' - terror australiano que es una obra maestra"
                };
                return horror[(int) (Math.random() * horror.length)];
            } else if (userMessage.contains("comedia") || userMessage.contains("risa")) {
                String[] comedy = {
                    "Comedia: 'El Gran Hotel Budapest' de Wes Anderson es genial",
                    "Para reÃ­r: 'Superbad' o 'Â¿QuÃ© pasÃ³ ayer?' son clÃ¡sicos",
                    "Comedia romÃ¡ntica: 'Loco, EstÃºpido, Amor' es perfecta",
                    "'The Nice Guys' - comedia de acciÃ³n con Ryan Gosling"
                };
                return comedy[(int) (Math.random() * comedy.length)];
            } else if (userMessage.contains("accion") || userMessage.contains("acciÃ³n")) {
                String[] action = {
                    "AcciÃ³n pura: 'Mad Max: Fury Road' es espectacular",
                    "ClÃ¡sico moderno: 'John Wick' redefiniÃ³ el gÃ©nero",
                    "Ã‰pica: 'Blade Runner 2049' es acciÃ³n + ciencia ficciÃ³n",
                    "'Casino Royale' - el mejor Bond de Daniel Craig"
                };
                return action[(int) (Math.random() * action.length)];
            } else {
                String[] general = {
                    "Te recomiendo 'Parasite' - drama coreano que ganÃ³ el Oscar",
                    "'Dune' (2021) es Ã©pica si te gusta la ciencia ficciÃ³n",
                    "'Knives Out' - misterio moderno con gran elenco",
                    "'Everything Everywhere All at Once' es locura pura y genial"
                };
                return general[(int) (Math.random() * general.length)];
            }
        }
        
 
        if (userMessage.contains("gÃ©nero") || userMessage.contains("tipo") || userMessage.contains("categoria")) {
            return "Los gÃ©neros principales son: Drama, Comedia, Terror, AcciÃ³n, Sci-Fi, Thriller, Romance, AnimaciÃ³n. Â¿CuÃ¡l te llama mÃ¡s la atenciÃ³n?";
        }
        
        
        if (userMessage.matches(".*\\b(actor|actriz|actuaci|interprete)\\b.*")) {
            String[] actorTalk = {
                "Â¡Los actores son el alma del cine! Â¿Tienes algÃºn favorito en mente?",
                "La actuaciÃ³n puede hacer o romper una pelÃ­cula. Â¿QuÃ© interpretaciÃ³n te marcÃ³?",
                "Desde DiCaprio hasta Meryl Streep, hay tanto talento. Â¿De quiÃ©n quieres saber?",
                "Una buena actuaciÃ³n te hace olvidar que estÃ¡s viendo una pelÃ­cula"
            };
            return actorTalk[(int) (Math.random() * actorTalk.length)];
        }
       
        if (userMessage.matches(".*\\b(director|dirigir|realizad)\\b.*")) {
            String[] directorTalk = {
                "Los directores son los visionarios del cine. Â¿Christopher Nolan, Tarantino, o Scorsese?",
                "Cada director tiene su sello Ãºnico. Â¿CuÃ¡l admiras mÃ¡s?",
                "De Kubrick a Denis Villeneuve, la direcciÃ³n es arte puro",
                "Un gran director puede hacer magia con cualquier historia"
            };
            return directorTalk[(int) (Math.random() * directorTalk.length)];
        }
        
        
        if (userMessage.matches(".*\\b(terror|miedo|susto|horror)\\b.*")) {
            String[] horror = {
                "El terror es mi gÃ©nero favorito. Â¿Prefieres psicolÃ³gico o gore?",
                "'The Shining' sigue siendo aterradora despuÃ©s de dÃ©cadas",
                "Terror moderno: 'It Follows' tiene un concepto brillante",
                "Â¿Has visto 'Get Out'? Terror social de Jordan Peele es genial"
            };
            return horror[(int) (Math.random() * horror.length)];
        }
        
      
        if (userMessage.matches(".*\\b(marvel|dc|superhÃ©r|batman|superman|spider|avengers)\\b.*")) {
            String[] superhero = {
                "Â¡Los superhÃ©roes dominan el cine! Â¿Team Marvel o Team DC?",
                "'The Dark Knight' sigue siendo la mejor pelÃ­cula de superhÃ©roes",
                "Marvel construyÃ³ algo Ã©pico con el MCU. Â¿Viste Endgame?",
                "DC tiene potencial: 'Wonder Woman' y 'Aquaman' fueron geniales"
            };
            return superhero[(int) (Math.random() * superhero.length)];
        }
        
        
        if (userMessage.matches(".*\\b(clasic|antiguas|viejo|moderno|actual|nuevo)\\b.*")) {
            String[] classics = {
                "Los clÃ¡sicos son atemporales: 'Casablanca', 'El Padrino'...",
                "El cine moderno tiene efectos, pero Â¿tiene el alma de los clÃ¡sicos?",
                "Hitchcock inventÃ³ el suspense. Scorsese lo perfeccionÃ³",
                "Cada Ã©poca tiene sus joyas. Â¿Prefieres historias de antes o actuales?"
            };
            return classics[(int) (Math.random() * classics.length)];
        }
        
        
        if (userMessage.matches(".*\\b(netflix|streaming|disney|amazon|hbo)\\b.*")) {
            String[] streaming = {
                "Â¡Las plataformas cambiaron todo! Netflix produce contenido increÃ­ble",
                "Disney+ tiene todo Marvel y Star Wars. Â¿Ya viste The Mandalorian?",
                "HBO Max: 'Game of Thrones', 'Succession'... contenido de calidad",
                "El streaming nos dio acceso a cine mundial. Â¡AprovÃ©chalo!"
            };
            return streaming[(int) (Math.random() * streaming.length)];
        }
        
      
        if (userMessage.matches(".*\\b(oscar|premio|award|ganar|mejor)\\b.*")) {
            return "Los Oscars son el mÃ¡ximo reconocimiento. Â¿CuÃ¡l crees que deberÃ­a haber ganado este aÃ±o? Siempre hay controversias interesantes.";
        }
        
        
        String[] intelligent = {
            "Interesante punto sobre el cine. Â¿Has notado cÃ³mo las pelÃ­culas reflejan su Ã©poca?",
            "El cine es el arte mÃ¡s completo: imagen, sonido, narrativa. Â¿QuÃ© te parece mÃ¡s importante?",
            "Cada pelÃ­cula es un mundo nuevo. Â¿Prefieres escapismo o realismo?",
            "Â¿SabÃ­as que el cine influye en la cultura mÃ¡s que cualquier otro medio?",
            "Una buena pelÃ­cula te cambia. Â¿CuÃ¡l fue la Ãºltima que te impactÃ³?",
            "El cine une a las personas. Â¿Vas solo al cine o prefieres compaÃ±Ã­a?",
            "Â¿Te fijas en la cinematografÃ­a o solo en la historia?",
            "Los efectos especiales vs. la narrativa: Â¿quÃ© pesa mÃ¡s para ti?"
        };
        
        return intelligent[(int) (Math.random() * intelligent.length)];
    }
    
    private void scrollToBottom() {
        if (messageAdapter.getItemCount() > 0) {
            recyclerView.smoothScrollToPosition(messageAdapter.getItemCount() - 1);
        }
    }
    
    private void saveMessages() {
        SharedPreferences sharedPreferences = getSharedPreferences("ChatMessages", Context.MODE_PRIVATE);
        SharedPreferences.Editor editor = sharedPreferences.edit();
        
        Gson gson = new Gson();
        String json = gson.toJson(messageList);
        
        String key = "messages_" + friendName.replaceAll("\\s+", "_").toLowerCase();
        editor.putString(key, json);
        editor.apply();
  
    }
    
    private void loadMessages() {
        SharedPreferences sharedPreferences = getSharedPreferences("ChatMessages", Context.MODE_PRIVATE);
        
        String key = "messages_" + friendName.replaceAll("\\s+", "_").toLowerCase();
        String json = sharedPreferences.getString(key, null);
        
        if (json != null) {
            Gson gson = new Gson();
            Type type = new TypeToken<ArrayList<Message>>(){}.getType();
            messageList = gson.fromJson(json, type);
            
            if (messageList == null) {
                messageList = new ArrayList<>();
            }
            
            Log.d(TAG, "Loaded " + messageList.size() + " messages for " + friendName);
        } else {
            Log.d(TAG, "No mensajes guardados para " + friendName);
            messageList = new ArrayList<>();
        }
    }
}
